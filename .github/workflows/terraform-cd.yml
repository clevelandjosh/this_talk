name: Terraform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'step1_setup/terraform/**'
      - '.github/workflows/terraform-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'step1_setup/terraform/**'
      - '.github/workflows/terraform-cd.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  TF_WORKING_DIR: './step1_setup/terraform'
  ARM_USE_OIDC: true

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan') || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
        TF_STATE_CONTAINER_NAME: ${{ secrets.TF_STATE_CONTAINER_NAME }}
        TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}
      run: |
        terraform init \
          -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
          -backend-config="key=$TF_STATE_KEY"

    - name: Terraform Plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_arm_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_arm_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_arm_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_arm_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
        TF_VAR_jira_admin_email: ${{ secrets.JIRA_ADMIN_EMAIL }}
        TF_VAR_crowdstrike_api_key: ${{ secrets.CROWDSTRIKE_API_KEY }}
        TF_VAR_mcp_server_count: ${{ secrets.MCP_SERVER_COUNT || '2' }}
        TF_VAR_location: ${{ secrets.LOCATION || 'eastus' }}
        TF_VAR_resource_prefix: ${{ secrets.RESOURCE_PREFIX || 'secconf' }}
      run: |
        terraform plan \
          -detailed-exitcode \
          -out=tfplan \
          -no-color 2>&1 | tee plan-output.txt

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: |
          ${{ env.TF_WORKING_DIR }}/tfplan
          ${{ env.TF_WORKING_DIR }}/plan-output.txt
        retention-days: 30

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './step1_setup/terraform/plan-output.txt';
          
          if (fs.existsSync(path)) {
            const plan = fs.readFileSync(path, 'utf8');
            const maxLength = 65000; // GitHub comment limit
            const truncatedPlan = plan.length > maxLength 
              ? plan.substring(0, maxLength) + '\n\n... (truncated)'
              : plan;
            
            const body = `## Terraform Plan Results
            
            <details>
            <summary>ðŸ“‹ Terraform Plan Output</summary>
            
            \`\`\`hcl
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            **Action Required:** Review the plan above and merge if acceptable.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
        TF_STATE_CONTAINER_NAME: ${{ secrets.TF_STATE_CONTAINER_NAME }}
        TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}
      run: |
        terraform init \
          -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
          -backend-config="key=$TF_STATE_KEY"

    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform output -json > terraform-outputs.json

    - name: Upload Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ github.run_number }}
        path: ${{ env.TF_WORKING_DIR }}/terraform-outputs.json
        retention-days: 90

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: destruction
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
        TF_STATE_CONTAINER_NAME: ${{ secrets.TF_STATE_CONTAINER_NAME }}
        TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}
      run: |
        terraform init \
          -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
          -backend-config="key=$TF_STATE_KEY"

    - name: Terraform Destroy
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_arm_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_arm_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_arm_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_arm_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
        TF_VAR_jira_admin_email: ${{ secrets.JIRA_ADMIN_EMAIL }}
        TF_VAR_crowdstrike_api_key: ${{ secrets.CROWDSTRIKE_API_KEY }}
        TF_VAR_mcp_server_count: ${{ secrets.MCP_SERVER_COUNT || '2' }}
        TF_VAR_location: ${{ secrets.LOCATION || 'eastus' }}
        TF_VAR_resource_prefix: ${{ secrets.RESOURCE_PREFIX || 'secconf' }}
      run: terraform destroy -auto-approve